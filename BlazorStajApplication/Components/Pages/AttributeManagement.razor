@page "/employee-attributes/{employeeId:int}"
@using BlazorStajApplication.Domain.Entities
@using BlazorStajApplication.Application.Commands
@using BlazorStajApplication.Application.Queries
@using BlazorStajApplication.Application.Commands.Handlers
@using BlazorStajApplication.Application.Queries.Handlers
@inject GetAttributesByEmployeeIdQueryHandler GetAttributesHandler
@inject AddAttributeCommandHandler AddAttributeHandler
@inject UpdateAttributeCommandHandler UpdateAttributeHandler
@inject NavigationManager Navigation

<h3>Employee Attributes Management</h3>

@if (Attributes == null)
{
    <p>Loading...</p>
}
else
{
    <h4>Employee ID: @EmployeeId</h4>
    <ul class="list-group">
        @foreach (var attr in Attributes)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <span>@attr.Key: @attr.Value</span>
                <button class="btn btn-primary btn-sm" @onclick="() => EditAttribute(attr.Id)">Edit</button>
            </li>
        }
    </ul>

    <h5>Add or Edit Attribute</h5>
    <EditForm Model="EditingAttribute" OnValidSubmit="SaveAttribute">
        <div class="mb-3">
            <label for="key" class="form-label">Key</label>
            <InputText id="key" class="form-control" @bind-Value="EditingAttribute.Key" />
        </div>
        <div class="mb-3">
            <label for="value" class="form-label">Value</label>
            <InputText id="value" class="form-control" @bind-Value="EditingAttribute.Value" />
        </div>
        <button type="submit" class="btn btn-success mt-3">Save</button>
        <button type="button" class="btn btn-secondary mt-3" @onclick="BackToEmployeeList">Back</button>
    </EditForm>
}

@code {
    [Parameter] public int EmployeeId { get; set; }
    private List<EmployeeAttribute>? Attributes;
    private EmployeeAttribute EditingAttribute = new EmployeeAttribute();

    protected override async Task OnInitializedAsync()
    {
        await LoadAttributes();
    }

    private async Task LoadAttributes()
    {
        Attributes = await GetAttributesHandler.Handle(new GetAttributesByEmployeeIdQuery { EmployeeId = EmployeeId });
    }

    private void EditAttribute(int id)
    {
        var attribute = Attributes.FirstOrDefault(a => a.Id == id);
        if (attribute != null)
        {
            EditingAttribute = new EmployeeAttribute
            {
                Id = attribute.Id,
                Key = attribute.Key,
                Value = attribute.Value,
                EmployeeId = attribute.EmployeeId
            };
        }
    }

    private async Task SaveAttribute()
    {
        if (EditingAttribute.Id == 0)
        {
            // Yeni Attribute ekleme
            await AddAttributeHandler.Handle(new AddAttributeCommand
            {
                EmployeeId = EmployeeId,
                Key = EditingAttribute.Key,
                Value = EditingAttribute.Value
            });
        }
        else
        {
            // Mevcut Attribute güncelleme
            await UpdateAttributeHandler.Handle(new UpdateAttributeCommand
            {
                Id = EditingAttribute.Id,
                Key = EditingAttribute.Key,
                Value = EditingAttribute.Value
            });
        }

        await LoadAttributes();
        EditingAttribute = new EmployeeAttribute();
    }

    private void BackToEmployeeList()
    {
        Navigation.NavigateTo("/employees");
    }
}

