@page "/projects-management"
@using BlazorStajApplication.Domain.Entities
@using BlazorStajApplication.Domain.Repositories
@using BlazorStajApplication.Application.Commands
@using BlazorStajApplication.Application.Commands.Handlers
@using BlazorStajApplication.Application.Queries
@using BlazorStajApplication.Application.Queries.Handlers
@inject GetAllProjectsQueryHandler GetAllProjectsHandler
@inject AssignEmployeesToProjectCommandHandler AssignEmployeesHandler
@inject UnassignEmployeesFromProjectCommandHandler UnassignEmployeesHandler
@inject GetProjectDetailsQueryHandler GetProjectDetailsHandler
@inject IEmployeeRepository _employeeRepository
@inject NavigationManager Navigation

<h3>Projects Management</h3>

@if (Projects == null)
{
    <p>Loading...</p>
}
else if (!Projects.Any())
{
    <p>No projects available.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var project in Projects)
            {
                <tr>
                    <td>@project.Name</td>
                    <td>@project.StartDate.ToShortDateString()</td>
                    <td>@(project.EndDate.HasValue ? project.EndDate.Value.ToShortDateString() : "N/A")</td>
                    <td>@project.Status</td>
                    <td>
                        <button class="btn btn-primary btn-sm me-2" @onclick="() => OpenAssignEmployeesModal(project)">
                            Assign Employees
                        </button>
                        <button class="btn btn-secondary btn-sm" @onclick="() => ShowProjectDetails(project)">
                            View Details
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Project Details -->
@if (SelectedProject != null)
{
    <h4>Details for @SelectedProject.Name</h4>
    <p>Status: @SelectedProject.Status</p>
    <p>Start Date: @SelectedProject.StartDate.ToShortDateString()</p>
    <p>End Date: @(SelectedProject.EndDate.HasValue ? SelectedProject.EndDate.Value.ToShortDateString() : "N/A")</p>

    <h5>Assigned Employees</h5>
    @if (!SelectedProject.Employees.Any())
    {
        <p>No employees assigned to this project.</p>
    }
    else
    {
        <ul class="list-group">
            @foreach (var employee in SelectedProject.Employees)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span>@employee.FirstName @employee.LastName</span>
                    <button class="btn btn-danger btn-sm" @onclick="() => UnassignEmployee(employee.Id)">
                        Unassign
                    </button>
                </li>
            }
        </ul>
    }
}

<!-- Employee Assignment Modal -->
@if (ShowAssignEmployees)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Assign Employees to @SelectedProject?.Name</h5>
                    <button type="button" class="btn-close" @onclick="CloseAssignEmployeesModal"></button>
                </div>
                <div class="modal-body">
                    @if (AvailableEmployees == null)
                    {
                        <p>Loading employees...</p>
                    }
                    else
                    {
                        <ul class="list-group">
                            @foreach (var employee in AvailableEmployees)
                            {
                                <li class="list-group-item">
                                    <input type="checkbox" @bind="employee.IsSelected" />
                                    @employee.FullName
                                </li>
                            }
                        </ul>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseAssignEmployeesModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="AssignEmployees">Assign</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Project>? Projects;
    private Project? SelectedProject;
    private List<EmployeeAssignment>? AvailableEmployees;
    private bool ShowAssignEmployees = false;

    protected override async Task OnInitializedAsync()
    {
        // Projeleri getirme
        Projects = await GetAllProjectsHandler.Handle(new GetAllProjectsQuery());
    }

    private async void OpenAssignEmployeesModal(Project project)
    {
        SelectedProject = project;
        var allEmployees = await GetEmployeesAsync();
        AvailableEmployees = allEmployees
            .Select(e => new EmployeeAssignment
                {
                    Id = e.Id,
                    FullName = $"{e.FirstName} {e.LastName}",
                    IsSelected = project.Employees.Any(pe => pe.Id == e.Id)
                })
            .ToList();

        ShowAssignEmployees = true;
    }

    private async Task<List<Employee>> GetEmployeesAsync()
    {
        // Çalışanları getir
        return await _employeeRepository.GetAllAsync();
    }

    private async void AssignEmployees()
    {
        if (SelectedProject == null || AvailableEmployees == null) return;

        var selectedEmployeeIds = AvailableEmployees
            .Where(e => e.IsSelected)
            .Select(e => e.Id)
            .ToList();

        await AssignEmployeesHandler.Handle(new AssignEmployeesToProjectCommand
            {
                ProjectId = SelectedProject.Id,
                EmployeeIds = selectedEmployeeIds
            });

        // Projeleri tekrar yükle ve modalı kapat
        Projects = await GetAllProjectsHandler.Handle(new GetAllProjectsQuery());
        CloseAssignEmployeesModal();
    }

    private void CloseAssignEmployeesModal()
    {
        ShowAssignEmployees = false;
        AvailableEmployees = null;
    }

    private async void UnassignEmployee(int employeeId)
    {
        if (SelectedProject == null) return;

        await UnassignEmployeesHandler.Handle(new UnassignEmployeesFromProjectCommand
            {
                ProjectId = SelectedProject.Id,
                EmployeeIds = new List<int> { employeeId }
            });

        // Proje detaylarını güncelle
        SelectedProject = await GetProjectDetailsHandler.Handle(new GetProjectDetailsQuery { ProjectId = SelectedProject.Id });
    }

    private void ShowProjectDetails(Project project)
    {
        SelectedProject = project;
    }

    private class EmployeeAssignment
    {
        public int Id { get; set; }
        public string FullName { get; set; }
        public bool IsSelected { get; set; }
    }
}

